import { omit } from "./lodash.mjs";
import { kebabCase, camelCase, upperFirst } from "scule";
const colorsToExclude = [
  "inherit",
  "transparent",
  "current",
  "white",
  "black",
  "slate",
  "gray",
  "zinc",
  "neutral",
  "stone",
  "cool"
];
const safelistByComponent = {
  alert: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-50`)
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`)
  }],
  avatar: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }],
  badge: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-50`)
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`)
  }],
  button: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-50`),
    variants: ["hover", "disabled"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-100`),
    variants: ["hover"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark", "dark:disabled"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`),
    variants: ["disabled", "dark:hover"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-600`),
    variants: ["hover"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-900`),
    variants: ["dark:hover"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-950`),
    variants: ["dark", "dark:hover", "dark:disabled"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark", "dark:disabled"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`),
    variants: ["dark:hover", "disabled"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-600`),
    variants: ["hover"]
  }, {
    pattern: new RegExp(`outline-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`outline-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }],
  input: (colorsAsRegex2) => [{
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark", "dark:focus"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus"]
  }],
  radio: (colorsAsRegex2) => [{
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }],
  checkbox: (colorsAsRegex2) => [{
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }],
  toggle: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }],
  range: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-400`),
    variants: ["dark:focus-visible"]
  }, {
    pattern: new RegExp(`ring-(${colorsAsRegex2})-500`),
    variants: ["focus-visible"]
  }],
  progress: (colorsAsRegex2) => [{
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }],
  meter: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }],
  notification: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`text-(${colorsAsRegex2})-500`)
  }],
  chip: (colorsAsRegex2) => [{
    pattern: new RegExp(`bg-(${colorsAsRegex2})-400`),
    variants: ["dark"]
  }, {
    pattern: new RegExp(`bg-(${colorsAsRegex2})-500`)
  }]
};
const safelistComponentAliasesMap = {
  "USelect": "UInput",
  "USelectMenu": "UInput",
  "UTextarea": "UInput",
  "URadioGroup": "URadio",
  "UMeterGroup": "UMeter"
};
const colorsAsRegex = (colors) => colors.join("|");
export const excludeColors = (colors) => {
  return Object.entries(omit(colors, colorsToExclude)).filter(([, value]) => typeof value === "object").map(([key]) => kebabCase(key));
};
export const generateSafelist = (colors, globalColors) => {
  const baseSafelist = Object.keys(safelistByComponent).flatMap((component) => safelistByComponent[component](colorsAsRegex(colors)));
  const formsSafelist = ["input", "radio", "checkbox", "toggle", "range"].flatMap((component) => safelistByComponent[component](colorsAsRegex(["red"])));
  return [
    ...baseSafelist,
    ...formsSafelist,
    // Ensure all global colors are safelisted for the Notification (toast.add)
    ...safelistByComponent["notification"](colorsAsRegex(globalColors)),
    // Gray safelist for Avatar & Notification
    "bg-gray-500",
    "dark:bg-gray-400",
    "text-gray-500",
    "dark:text-gray-400"
  ];
};
export const customSafelistExtractor = (prefix, content, colors, safelistColors) => {
  const classes = [];
  const regex = /<([A-Za-z][A-Za-z0-9]*(?:-[A-Za-z][A-Za-z0-9]*)*)\s+(?![^>]*:color\b)[^>]*\bcolor=["']([^"']+)["'][^>]*>/gs;
  const matches = content.matchAll(regex);
  const components = Object.keys(safelistByComponent).map((component) => `${prefix}${component.charAt(0).toUpperCase() + component.slice(1)}`);
  for (const match of matches) {
    const [, component, color] = match;
    const camelComponent = upperFirst(camelCase(component));
    if (!colors.includes(color) || safelistColors.includes(color)) {
      continue;
    }
    let name = safelistComponentAliasesMap[camelComponent] ? safelistComponentAliasesMap[camelComponent] : camelComponent;
    if (!components.includes(name)) {
      continue;
    }
    name = name.replace(prefix, "").toLowerCase();
    const matchClasses = safelistByComponent[name](color).flatMap((group) => {
      return ["", ...group.variants || []].flatMap((variant) => {
        const matches2 = group.pattern.source.match(/\(([^)]+)\)/g);
        return matches2.map((match2) => {
          const colorOptions = match2.substring(1, match2.length - 1).split("|");
          return colorOptions.map((color2) => `${variant ? variant + ":" : ""}` + group.pattern.source.replace(match2, color2));
        }).flat();
      });
    });
    classes.push(...matchClasses);
  }
  return classes;
};
